System coldstorage

//-----------------------------------------------------------------------

Request doJob : doJob(KG)
Reply jobdone : jobdone(NO_PARAM)
Reply robotDead : robotDead(NO_PARAM)

Dispatch updateWeight : updateWeight(PESO)



//-----------------------------------------------------------------------

Context ctxcoldstoragearea ip [host="localhost" port=8040]

//-----------------------------------------------------------------------

Context ctxbasicrobot ip [host="127.0.0.1" port=8020] 

ExternalQActor transporttrolley context ctxbasicrobot




QActor controller context ctxcoldstoragearea {

	[# var KG = 0
		#]
		
	State s0 initial {
		printCurrentMessage
		}
	Goto mockRequest
	
	State mockRequest {
		[#
			KG = Math.floor(Math.random() *(20 - 10 + 1) + 10).toInt()
			
		#]
		printCurrentMessage
		request transporttrolley -m doJob : doJob($KG)
		
	} Transition endjob whenReply robotDead -> handlerobotdead
						whenReply jobdone -> jobdone
	
	State jobdone{
		forward coldroom -m updateWeight : updateWeight($KG)
		//ChargeTaken
	} Transition repeat whenTime 15000 -> mockRequest
	
	State handlerobotdead{
		printCurrentMessage
	}
}



QActor coldroom context ctxcoldstoragearea {
	[#
		var PesoCorrente = 0
	#]
	
	State s0 initial {
		printCurrentMessage
	} Transition update whenMsg updateWeight -> updateWeight
	
	State updateWeight {
		printCurrentMessage
		onMsg ( updateWeight : updateWeight(PESO) ) {
			[# PesoCorrente += payloadArg(0).toInt() 
				#]
		}
		println("peso aggiornato")
		println("nuovo peso: $PesoCorrente")
	} Transition update whenMsg updateWeight -> updateWeight
}


