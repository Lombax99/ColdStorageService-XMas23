System coldstorage2

//-----------------------------------------------------------------------

Request doJob : doJob(KG)
Reply jobdone : jobdone(NO_PARAM)
Reply robotDead : robotDead(NO_PARAM)

//il peso promesso viene sottratto, se va aumentato fornire P_PRO negativo
Dispatch updateWeight : updateWeight(P_EFF, P_PRO)

//-----------------------------------------------------------------------

Request depositRequest : depositRequest(PESO)
Reply accept : accept(TICKET)
Reply reject : reject(NO_PARAM)


Request weightrequest : weightrequest(PESO)
Reply weightOK : weightOK( NO_PARAM )
Reply weightKO : weightKO( NO_PARAM )

Request checkmyticket : checkmyticket(TICKET)
Reply	ticketchecked : ticketchecked(BOOL)

Request loaddone : loaddone(PESO)
Reply 	chargetaken : chargetaken(NO_PARAM)

//-----------------------------------------------------------------------

Context ctxcoldstoragearea ip [host="localhost" port=8040]

//-----------------------------------------------------------------------

//Context ctxbasicrobot ip [host="127.0.0.1" port=8020] 

//ExternalQActor transporttrolley context ctxbasicrobot




QActor controller context ctxcoldstoragearea {

	[# var PESO = 0
		#]
		
	State s0 initial {
		printCurrentMessage
	} Goto work
	
	State work{
		println("controller - in attesa") color green
	} Transition t0 whenRequest loaddone -> startjob
	
	//senza robot
	State startjob  {
		onMsg(loaddone : loaddone(PESO) ){
			[# PESO = payloadArg(0).toInt()
				#]
			println("controller - dichiarato: $PESO") color green
		}
		
		replyTo loaddone with chargetaken : chargetaken( NO_PARAM )
		forward coldroom -m updateWeight : updateWeight($PESO, $PESO)
		
	} Goto work
	
	/* col robot 
	State startjob  {
		onMsg(loaddone : loaddone(P_EFF, P_DIC) ){
			[# KG = payloadArg(0).toInt()
				P_DIC = payloadArg(1).toInt()
				#]
			println("controller - dichiarato: $P_DIC, effettivo: $KG") color green
		}
		replyTo loaddone with chargetaken : chargetaken( NO_PARAM )
		request transporttrolley -m doJob : doJob($KG)
		
	} Transition endjob whenReply robotDead -> handlerobotdead
						whenReply jobdone -> jobdone
	*/
	State jobdone{
		forward coldroom -m updateWeight : updateWeight($PESO, $PESO)
	} Transition repeat whenTime 15000 -> work
	
	
	State handlerobotdead{
		println("robotdead") color green
		printCurrentMessage
	}
}



QActor coldroom context ctxcoldstoragearea {
	//corrente: quanta roba c'è nella cold room
	//previsto: quanto deve ancora arrivare, ma per cui c'è un biglietto emesso
	[#
		var PesoEffettivo = 0
		var PesoPromesso = 0 
		var MAXW = 50
	#]
	
	State s0 initial {
		printCurrentMessage
	} Goto work
	
	State work{
		
	}Transition update whenMsg updateWeight -> updateWeight
					   whenRequest weightrequest -> checkweight
		
	
	State updateWeight {
		onMsg ( updateWeight : updateWeight(P_EFF, P_PRO) ) {
			[# PesoEffettivo += payloadArg(0).toInt() 
				PesoPromesso -= payloadArg(1).toInt()
				#]
		}
		println("coldroom update - peso promesso: $PesoPromesso, nuovo peso effettivo: $PesoEffettivo") color green
	} Goto work
	
	
	
	
	State checkweight {
		onMsg(weightrequest : weightrequest(PESO)){
			[# var PesoRichiesto = payloadArg(0).toInt() 
				#]
			println("coldroom - richiesti: $PesoRichiesto, effettivo: $PesoEffettivo, promesso: $PesoPromesso") color green
			
			if [# PesoEffettivo + PesoPromesso + PesoRichiesto  <= MAXW #]	{
				[# PesoPromesso += PesoRichiesto
					#]
					println("coldroom - accettato, peso promesso: $PesoPromesso") color green
				replyTo weightrequest with weightOK : weightOK( NO_PARAM)
			} else {
				println("coldroom - rifiutato") color green
				replyTo weightrequest with weightKO : weightKO( NO_PARAM )
			}
		}
	} Goto work
}


QActor tickethandler context ctxcoldstoragearea {
	
	[#	
		var Ticket = ""
		var Peso = 0
		var Accepted = false
		#]
	State s0 initial{
		printCurrentMessage
	} Goto work
	
	
	State work {
	}Transition t0  whenRequest depositRequest -> checkforweight
					whenRequest checkmyticket -> checktheticket
	
	State checkforweight {
		
		onMsg(depositRequest : depositRequest(PESO)){
			
			[# Peso = payloadArg(0).toInt()
				#]
			println("tickethandler - richiedo $Peso") color blue
			request coldroom -m weightrequest : weightrequest($Peso)
		}
	}Transition t1 whenReply weightKO -> checkdeadlines
					whenReply weightOK -> returnticket
					
	
	State checkdeadlines{
				
		println("tickethandler - rifiutato, controllo i biglietti") color blue
		
		[# var Spazioliberato = 0
			Accepted = false
			//TODO controllare che si liberi dello spazio con i biglietti scaduti					
			if (Spazioliberato >= Peso){ //c'è abbastanza spazio per la richiesta corrente'
				Spazioliberato -= Peso
				Accepted = true
				}
			Spazioliberato *= -1 //andrà in sottrazione, per cui deve essere negativo
			#]
			forward coldroom -m updateWeight : updateWeight(0, $Spazioliberato)
	} Goto returnticket if [# Accepted #] else reject
	
	State reject {
		println("tickethandler - non c'è comunque posto, vai a casa") color blue
		replyTo depositRequest with reject : reject( reject )
	} Goto work
	
	
	
	State returnticket {
		
		[# //TODO
			Ticket =  "MOCKTICKET"
			#]
			println("tickethandler - accettato") color blue
			replyTo depositRequest with accept : accept( $Ticket )
	} Goto work
	
	
	
	
	State checktheticket {
		onMsg(checkmyticket : checkmyticket(TICKET)){
			println("tickethandler - controllo il biglietto") color blue
			
			[#	var Ticket = payloadArg(0)
				
				//TODO
				
				var Ticketvalid = true
				#]
			println("tickethandler - il biglietto è valido? $Ticketvalid") color blue
			replyTo checkmyticket with ticketchecked : ticketchecked($Ticketvalid)
		}
	} Goto work
	
	
}

QActor serviceaccessgui context ctxcoldstoragearea {
	[#	var PESO = 0
		var Ticket = ""
		var Ticketok = false
		#]
	
	State s0 initial {
		printCurrentMessage
	} Goto work
	
	
	State work {
		println("SAG - ricomincio") color yellow
		//random tra 10 e 20
		[# PESO = Math.floor(Math.random() *(20 - 10 + 1) + 10).toInt()
			#]
		println("SAG - richiedo $PESO") color yellow
		request tickethandler -m depositRequest : depositRequest($PESO)
		
	} Transition t0 whenReply accept -> gotoindoor
					whenReply reject -> tryagainlater
					
				
					
	State tryagainlater{
		println("SAG - rifiutato") color yellow
	}Transition wait whenTime 5000 -> work
	
	
	
	State gotoindoor{
		println("SAG - accettato") color yellow
		onMsg( accept : accept(TICKET)){
			[#	Ticket = payloadArg(0)
				#]
			println("SAG - $Ticket") color yellow
		}
	}Transition t2 whenTime 1000 -> giveticket
	
	State giveticket{
		println("SAG - consegno il biglietto") color yellow
		
		request tickethandler -m checkmyticket : checkmyticket($Ticket)
	}Transition tc whenReply ticketchecked -> checkresponse
	
	State checkresponse {
		onMsg (ticketchecked : ticketchecked(BOOL)){
			[# Ticketok = payloadArg(0).toBoolean()
				# ]
		}
		println("SAG - biglietto accettato? : $Ticketok") color yellow
	} Goto work if [# !Ticketok #] else unloading


	State unloading{
		println("SAG - scarico") color yellow
	}Transition t4 whenTime 3000 -> loaddone
	
	State loaddone {
		request controller -m loaddone : loaddone($PESO)
	} Transition t6 whenReply chargetaken -> work
	
}


