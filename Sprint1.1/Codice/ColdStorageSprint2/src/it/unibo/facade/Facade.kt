/* Generated by AN DISI Unibo */ 
package it.unibo.facade

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
class Facade ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var Ticket = ""
				var Peso = 0
				var PesoEff = 0
				var PesoProm = 0
				var Valid = true
				
				return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delegate("depositRequest", "tickethandler") 
						delegate("loaddone", "controller") 
						delegate("checkmyticket", "tickethandler") 
						delegate("getweight", "coldroom") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
