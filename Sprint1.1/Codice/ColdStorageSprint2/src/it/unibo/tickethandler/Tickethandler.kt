/* Generated by AN DISI Unibo */ 
package it.unibo.tickethandler

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Tickethandler ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
			
				var Ticket = ""
				var Peso = 0
				var Accepted = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="checkforweight",cond=whenRequest("depositRequest"))
					transition(edgeName="t05",targetState="checktheticket",cond=whenRequest("checkmyticket"))
				}	 
				state("checkforweight") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("depositRequest(PESO)"), Term.createTerm("depositRequest(PESO)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Peso = payloadArg(0).toInt()
								CommUtils.outblue("tickethandler - richiedo $Peso")
								request("weightrequest", "weightrequest($Peso)" ,"coldroom" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t16",targetState="checkdeadlines",cond=whenReply("weightKO"))
					transition(edgeName="t17",targetState="returnticket",cond=whenReply("weightok"))
				}	 
				state("checkdeadlines") { //this:State
					action { //it:State
						CommUtils.outblue("tickethandler - rifiutato, controllo i biglietti")
						 var Spazioliberato = 0
									Accepted = false
									//TODO controllare che si liberi dello spazio con i biglietti scaduti					
									if (Spazioliberato >= Peso){
										Spazioliberato -= Peso
										Accepted = true
										}
									Spazioliberato *= -1 //andrà in sottrazione, per cui deve essere negativo
						forward("updateWeight", "updateWeight(0,$Spazioliberato)" ,"coldroom" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="returnticket", cond=doswitchGuarded({ Accepted  
					}) )
					transition( edgeName="goto",targetState="reject", cond=doswitchGuarded({! ( Accepted  
					) }) )
				}	 
				state("reject") { //this:State
					action { //it:State
						CommUtils.outblue("tickethandler - non c'è comunque posto, vai a casa")
						answer("depositRequest", "reject", "reject(reject)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("returnticket") { //this:State
					action { //it:State
						 //TODO
									Ticket =  "MOCKTICKET"
						CommUtils.outblue("tickethandler - accettato")
						answer("depositRequest", "heresyourticket", "heresyourticket($Ticket)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("checktheticket") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("checkmyticket(TICKET)"), Term.createTerm("checkmyticket(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("tickethandler - controllo il biglietto")
									var Ticket = payloadArg(0)
												
												//TODO
												
												var Ticketvalid = true
								CommUtils.outblue("tickethandler - il biglietto è valido? $Ticketvalid")
								answer("checkmyticket", "ticketchecked", "ticketchecked($Ticketvalid)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
