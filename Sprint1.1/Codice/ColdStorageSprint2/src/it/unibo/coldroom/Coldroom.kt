/* Generated by AN DISI Unibo */ 
package it.unibo.coldroom

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldroom ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var PesoCorrente = 0
				var PesoPrevisto = 0 
				var MAXW = 50
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="update2",targetState="updateWeight",cond=whenDispatch("updateWeight"))
					transition(edgeName="update3",targetState="checkweight",cond=whenRequest("weightrequest"))
				}	 
				state("updateWeight") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("updateWeight(P_EFF,P_DIC)"), Term.createTerm("updateWeight(PESO,P_DIC)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 PesoCorrente += payloadArg(0).toInt() 
												PesoPrevisto -= payloadArg(1).toInt()
						}
						CommUtils.outgreen("coldroom - peso promesso: $PesoPrevisto")
						CommUtils.outgreen("coldroom - nuovo peso: $PesoCorrente")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("checkweight") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("weightrequest(PESO)"), Term.createTerm("weightrequest(PESO)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var PesoRichiesto = payloadArg(0).toInt() 
								CommUtils.outgreen("coldroom - richiesti $PesoRichiesto, corrente: $PesoCorrente")
								if( PesoRichiesto + PesoCorrente + PesoPrevisto <= MAXW  
								 ){ PesoPrevisto += PesoRichiesto
								CommUtils.outgreen("coldroom - accettato, peso previsto: $PesoPrevisto")
								answer("weightrequest", "weightok", "weightok(NO_PARAM)"   )  
								}
								else
								 {CommUtils.outgreen("coldroom - rifiutato")
								 answer("weightrequest", "weightKO", "weightKO(NO_PARAM)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
