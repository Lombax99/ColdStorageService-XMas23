/* Generated by AN DISI Unibo */ 
package it.unibo.controller

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
class Controller ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var PESO = 0
				
				return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outgreen("controller - work")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="stopped",cond=whenDispatch("stop"))
					transition(edgeName="t01",targetState="work",cond=whenDispatch("continue"))
					transition(edgeName="t02",targetState="startjob",cond=whenRequest("loaddone"))
				}	 
				state("stopped") { //this:State
					action { //it:State
						CommUtils.outgreen("controller - stopped")
						forward("stopped", "stopped(1)" ,"led" ) 
						forward("stopplan", "stopplan(1)" ,"planexec" ) 
						updateResourceRep( "Stopped" 
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="stopped",cond=whenDispatch("stop"))
					transition(edgeName="t04",targetState="continueworking",cond=whenDispatch("continue"))
				}	 
				state("continueworking") { //this:State
					action { //it:State
						CommUtils.outgreen("controller - continue")
						forward("arrivedhome", "arrivedhome(1)" ,"led" ) 
						forward("continueplan", "continueplan(1)" ,"planexec" ) 
						updateResourceRep( "In Home" 
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("startjob") { //this:State
					action { //it:State
						forward("moving", "moving(1)" ,"led" ) 
						updateResourceRep( "Moving" 
						)
						if( checkMsgContent( Term.createTerm("loaddone(PESO)"), Term.createTerm("loaddone(PESO)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 PESO = payloadArg(0).toInt()
								CommUtils.outgreen("controller - startjob dichiarato: $PESO")
						}
						answer("loaddone", "chargetaken", "chargetaken(NO_PARAM)"   )  
						request("doJob", "doJob($PESO)" ,"transporttrolley" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="endjob5",targetState="stoppedwhileworking",cond=whenDispatch("stop"))
					transition(edgeName="endjob6",targetState="handlerobotdead",cond=whenReply("robotDead"))
					transition(edgeName="endjob7",targetState="jobdone",cond=whenReply("jobdone"))
				}	 
				state("stoppedwhileworking") { //this:State
					action { //it:State
						forward("stopplan", "stopplan(1)" ,"planexec" ) 
						CommUtils.outmagenta("stopped while working")
						forward("stopped", "stopped(1)" ,"led" ) 
						updateResourceRep( "Stopped" 
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="waitingforreply",cond=whenDispatch("continue"))
				}	 
				state("waitingforreply") { //this:State
					action { //it:State
						forward("continueplan", "continueplan(1)" ,"planexec" ) 
						CommUtils.outgreen("continued")
						forward("moving", "moving(1)" ,"led" ) 
						updateResourceRep( "Moving" 
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="endjob9",targetState="stoppedwhileworking",cond=whenDispatch("stop"))
					transition(edgeName="endjob10",targetState="handlerobotdead",cond=whenReply("robotDead"))
					transition(edgeName="endjob11",targetState="jobdone",cond=whenReply("jobdone"))
				}	 
				state("jobdone") { //this:State
					action { //it:State
						forward("arrivedhome", "arrivedhome(1)" ,"led" ) 
						updateResourceRep( "In Home" 
						)
						forward("updateWeight", "updateWeight($PESO,$PESO)" ,"coldroom" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handlerobotdead") { //this:State
					action { //it:State
						CommUtils.outred("robotdead")
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
