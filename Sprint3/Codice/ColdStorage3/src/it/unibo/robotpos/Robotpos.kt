/* Generated by AN DISI Unibo */ 
package it.unibo.robotpos

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
class Robotpos ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 val planner = unibo.planner23.Planner23Util()
			    val MapName = "mapCompleteWithObst23ok"
			    val MyName    = name 
			    var StepTime  = "315"
				var Plan      = ""	
				var TargetX   = ""
				var TargetY   = ""
				var X         = ""
				var Y         = ""
				var D         = ""
				return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("$name STARTS loading $MapName")
						 planner.initAI()  
								   planner.loadRoomMap(MapName) 
								   planner.showMap()
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
				state("waitclientrequest") { //this:State
					action { //it:State
						CommUtils.outblack("$name | waiting the client request...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t040",targetState="getRobotState",cond=whenRequest("getrobotstate"))
					transition(edgeName="t041",targetState="planTheRobotmoves",cond=whenRequest("moverobot"))
					transition(edgeName="t042",targetState="setTheRobotState",cond=whenDispatch("setrobotstate"))
					transition(edgeName="t043",targetState="setTheDirection",cond=whenDispatch("setdirection"))
				}	 
				state("getRobotState") { //this:State
					action { //it:State
						 val PX   = planner.getPosX() 
						    		val PY  = planner.getPosY()
						    		val DIR = ""+planner.getDir()
						answer("getrobotstate", "robotstate", "robotstate(pos($PX,$PY),$DIR)"   )  
						CommUtils.outblack("$name | replied to ropbotstate")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
				state("setTheDirection") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("dir(D)"), Term.createTerm("dir(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 D       = payloadArg(0)
						}
						 Plan = planner.setTheDirection(D)  
						request("doplan", "doplan($Plan,$StepTime)" ,"planexec" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t044",targetState="planfordirok",cond=whenReply("doplandone"))
					transition(edgeName="t045",targetState="fatalerror",cond=whenReply("doplanfailed"))
				}	 
				state("planfordirok") { //this:State
					action { //it:State
						 planner.doPathOnMap(Plan)  
						 planner.showCurrentRobotState();  
						updateResourceRep( planner.robotOnMap()  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
				state("fatalerror") { //this:State
					action { //it:State
						CommUtils.outred("fatalerror ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
				state("setTheRobotState") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("setpos(X,Y,D)"), Term.createTerm("setpos(X,Y,D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 X = payloadArg(0)
											   Y = payloadArg(1)
											   D = payloadArg(2)
						}
						 planner.setRobotState(X,Y,D)  
						 planner.showCurrentRobotState();  
						delay(300) 
						updateResourceRep( planner.robotOnMap()  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
				state("planTheRobotmoves") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moverobot(TARGETX,TARGETY)"), Term.createTerm("moverobot(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TargetX = payloadArg(0)
											   TargetY = payloadArg(1)
						}
						  
								   Plan = planner.planForGoal(""+TargetX,""+TargetY).toString()
								   println("planTheRobotmoves $Plan")
								   Plan = planner.planCompacted(Plan) 
								   if( Plan.isEmpty()) Plan="''"
						CommUtils.outblue("$name | Plan to reach pos: $Plan")
						request("doplan", "doplan($Plan,$StepTime)" ,"planexec" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t046",targetState="endok",cond=whenReply("doplandone"))
					transition(edgeName="t047",targetState="endko",cond=whenReply("doplanfailed"))
				}	 
				state("endok") { //this:State
					action { //it:State
						 planner.doPathOnMap(Plan)  
						 planner.showCurrentRobotState();  
						updateResourceRep( planner.robotOnMap()  
						)
						answer("moverobot", "moverobotdone", "moverobotdone(ok)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
				state("endko") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("doplanfailed(ARG)"), Term.createTerm("doplanfailed(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val PathTodo = payloadArg(0)  
								CommUtils.outred("pos NOT reached - PathTodo = ${PathTodo} vs. $Plan")
								   var PathDone = Plan.substring(0, Plan.lastIndexOf(PathTodo)+1)
												 if( PathDone == "" ) PathDone ="n"				 
												 else planner.doPathOnMap(PathDone)
								updateResourceRep( planner.robotOnMap()  
								)
								 planner.showCurrentRobotState();  
								answer("moverobot", "moverobotfailed", "moverobotfailed($PathDone,$PathTodo)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
			}
		}
} 
