/* Generated by AN DISI Unibo */ 
package it.unibo.led

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
class Led ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
				return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="athome",cond=whenDispatch("arrivedhome"))
					transition(edgeName="t01",targetState="currmoving",cond=whenDispatch("moving"))
					transition(edgeName="t02",targetState="arrested",cond=whenDispatch("stopped"))
				}	 
				state("athome") { //this:State
					action { //it:State
						    
									try{
						      			val p  = Runtime.getRuntime().exec("python3 ledOFF.py")
						      			
						    			}catch( e : Exception){
						      				println(e.message)
						    			}
						CommUtils.outyellow("alarm - atHome - led off")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t13",targetState="currmoving",cond=whenDispatch("moving"))
					transition(edgeName="t14",targetState="arrested",cond=whenDispatch("stopped"))
				}	 
				state("currmoving") { //this:State
					action { //it:State
						    
									try{
						      			val p  = Runtime.getRuntime().exec("python3 ledON.py")
						      			
						    			}catch( e : Exception){
						      				println(e.message)
						    			}
						CommUtils.outyellow("alarm - moving - led on")
						 Thread.sleep(1000);
									try{
						      			val p  = Runtime.getRuntime().exec("python3 ledOFF.py")
						      			
						    			}catch( e : Exception){
						      				println(e.message)
						    			}
									
						CommUtils.outyellow("alarm - moving - led off")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_currmoving", 
				 	 					  scope, context!!, "local_tout_led_currmoving", 1000.toLong() )
					}	 	 
					 transition(edgeName="t25",targetState="currmoving",cond=whenTimeout("local_tout_led_currmoving"))   
					transition(edgeName="t26",targetState="athome",cond=whenDispatch("arrivedhome"))
					transition(edgeName="t27",targetState="arrested",cond=whenDispatch("stopped"))
				}	 
				state("arrested") { //this:State
					action { //it:State
						    
									try{
						      			val p  = Runtime.getRuntime().exec("python3 ledON.py")
						      			
						    			}catch( e : Exception){
						      				println(e.message)
						    			}
						CommUtils.outyellow("alarm - arrested - led on")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t38",targetState="athome",cond=whenDispatch("arrivedhome"))
					transition(edgeName="t39",targetState="currmoving",cond=whenDispatch("moving"))
				}	 
			}
		}
} 
