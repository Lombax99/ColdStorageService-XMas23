/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
			var Peso = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						forward("setrobotstate", "setpos(0,0,down)" ,"robotpos" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="ready0",targetState="work",cond=whenDispatch("robotready"))
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outgreen("robot ! waiting")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="startworking1",targetState="arrival",cond=whenDispatch("doJob"))
				}	 
				state("arrival") { //this:State
					action { //it:State
						CommUtils.outgreen("arrival")
						if( checkMsgContent( Term.createTerm("doJob(KG)"), Term.createTerm("doJob(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Peso = payloadArg(0).toInt() 
								CommUtils.outgreen("peso ricevuto: $Peso")
								request("moverobot", "moverobot(0,4)" ,"robotpos" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="gofetch2",targetState="raccogli",cond=whenReply("moverobotdone"))
				}	 
				state("raccogli") { //this:State
					action { //it:State
						CommUtils.outgreen("peso caricato $Peso")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="coldroom", cond=doswitch() )
				}	 
				state("coldroom") { //this:State
					action { //it:State
						request("moverobot", "moverobot(5,3)" ,"robotpos" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="godrop3",targetState="scarica",cond=whenReply("moverobotdone"))
				}	 
				state("scarica") { //this:State
					action { //it:State
						forward("updateWeight", "updateWeight($Peso)" ,"coldroom" ) 
						  Peso = 0
						CommUtils.outgreen("scaricato")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_scarica", 
				 	 					  scope, context!!, "local_tout_transporttrolley_scarica", 3000.toLong() )
					}	 	 
					 transition(edgeName="gofetchagain4",targetState="gohome",cond=whenTimeout("local_tout_transporttrolley_scarica"))   
					transition(edgeName="gofetchagain5",targetState="arrival",cond=whenDispatch("doJob"))
				}	 
				state("gohome") { //this:State
					action { //it:State
						CommUtils.outgreen("going home")
						request("moverobot", "moverobot(0,0)" ,"robotpos" )  
						forward("setdirection", "dir(down)" ,"robotpos" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("workprova") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
